library(mlbench)
#package with data sample
data("PimaIndiansDiabetes2",package = 'mlbench')
data <- PimaIndiansDiabetes2
head(data)
summary(data)
preProValues <- preProcess(data[,-9],method = c("center","scale"))
scaleddata <- predict(preProValues,data[,-9])
#Normalization
preProcbox <- preProcess(scaleddata,method = c("YeoJohnson"))
boxdata <- predict(preProcbox,scaleddata)
#YeoJohnson Transfer (to norm distribution)
preProcimp <- preProcess(boxdata,method = "bagImpute")
procdata <- predict(preProcimp,boxdata)
#Missing Values
procdata$class <- data[,9]
head(procdata)
summary(procdata)
featurePlot(scaleddata,data[,9],plot='box')
rpartModel <- rpart(class~.,data=procdata,control = rpart.control(cp=0))
#Tree growth without limitation
rpart.plot(rpartModel)
plotcp(rpartModel)
rpartModel$cptable
cptable <- as.data.frame(rpartModel$cptable)
cptable$errsd <- cptable$xerror + cptable$xstd
cpvalue <- cptable[which.min(cptable$errsd),"CP"]
#Find out the best CP value for tree
pruneModel <- prune(rpartModel,0.007462687)
#prune the tree
rpart.plot(pruneModel)
pre <- predict(pruneModel,procdata,type='class')
pretable <- table(pre,procdata$class)
pretable
accurary <- sum(diag(pretable))/sum(pretable)
accurary
varImp(pruneModel)
install.packages("rpart",repos="http://cran.rstudio.com/")
install.packages("rpart.plot",repos="http://cran.rstudio.com/")
install.packages("caret",repos="http://cran.rstudio.com/")
install.packages("ctv")
install.packages("mlbench",repos="https://cran.r-project.org/")
library(lattice)
library(ggplot2)
library(caret)
#packages for preprocess
library(rpart)
library(rpart.plot)
#packages for decision tree
library(mlbench)
#package with data sample
data("PimaIndiansDiabetes2",package = 'mlbench')
data <- PimaIndiansDiabetes2
head(data)
summary(data)
preProValues <- preProcess(data[,-9],method = c("center","scale"))
scaleddata <- predict(preProValues,data[,-9])
#Normalization
preProcbox <- preProcess(scaleddata,method = c("YeoJohnson"))
boxdata <- predict(preProcbox,scaleddata)
#YeoJohnson Transfer (to norm distribution)
preProcimp <- preProcess(boxdata,method = "bagImpute")
procdata <- predict(preProcimp,boxdata)
#Missing Values
procdata$class <- data[,9]
head(procdata)
summary(procdata)
featurePlot(scaleddata,data[,9],plot='box')
rpartModel <- rpart(class~.,data=procdata,control = rpart.control(cp=0))
#Tree growth without limitation
rpart.plot(rpartModel)
plotcp(rpartModel)
rpartModel$cptable
cptable <- as.data.frame(rpartModel$cptable)
cptable$errsd <- cptable$xerror + cptable$xstd
install.packages("mlbench", repos = "https://cran.r-project.org/")
install.packages("rpart", repos = "http://cran.rstudio.com/")
data("PimaIndiansDiabetes2",package = 'mlbench')
data <- PimaIndiansDiabetes2
head(data)
summary(data)
preProValues <- preProcess(data[,-9],method = c("center","scale"))
scaleddata <- predict(preProValues,data[,-9])
#Normalization
preProcbox <- preProcess(scaleddata,method = c("YeoJohnson"))
boxdata <- predict(preProcbox,scaleddata)
#YeoJohnson Transfer (to norm distribution)
preProcimp <- preProcess(boxdata,method = "bagImpute")
procdata <- predict(preProcimp,boxdata)
#Missing Values
procdata$class <- data[,9]
head(procdata)
summary(procdata)
featurePlot(scaleddata,data[,9],plot='box')
rpartModel <- rpart(class~.,data=procdata,control = rpart.control(cp=0))
#Tree growth without limitation
rpart.plot(rpartModel)
plotcp(rpartModel)
rpartModel$cptable
cptable <- as.data.frame(rpartModel$cptable)
cptable$errsd <- cptable$xerror + cptable$xstd
cpvalue <- cptable[which.min(cptable$errsd),"CP"]
#Find out the best CP value for tree
pruneModel <- prune(rpartModel,0.007462687)
#prune the tree
rpart.plot(pruneModel)
pre <- predict(pruneModel,procdata,type='class')
pretable <- table(pre,procdata$class)
pretable
accurary <- sum(diag(pretable))/sum(pretable)
accurary
varImp(pruneModel)
install.packages("rpart",repos="http://cran.rstudio.com/")
install.packages("rpart.plot",repos="http://cran.rstudio.com/")
install.packages("caret",repos="http://cran.rstudio.com/")
install.packages("mlbench",repos="https://cran.r-project.org/")
library(lattice)
library(caret)
#packages for preprocess
library(rpart)
#packages for preprocess
library(rpart)
library(rpart.plot)
library(lattice)
library(ggplot2)
install.packages("mlbench",repos="https://cran.r-project.org/")
library(lattice)
library(ggplot2)
install.packages("mlbench",repos="https://cran.r-project.org/")
library(lattice)
library(ggplot2)
install.packages("ggplot2",repos="https://cran.r-project.org/")
library(lattice)
library(ggplot2)
library(caret)
install.packages("rpart",repos="http://cran.rstudio.com/")
install.packages("rpart.plot",repos="http://cran.rstudio.com/")
install.packages("caret",repos="http://cran.rstudio.com/")
install.packages("ctv")
install.packages("mlbench",repos="https://cran.r-project.org/")
library(lattice)
library(lattice)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(caret)
#packages for preprocess
library(rpart)
library(rpart.plot)
library(mlbench)
#package with data sample
data("PimaIndiansDiabetes2",package = 'mlbench')
install.packages("rpart",repos="http://cran.rstudio.com/")
install.packages("rpart.plot",repos="http://cran.rstudio.com/")
install.packages("caret",repos="http://cran.rstudio.com/")
install.packages("ctv")
install.packages("mlbench",repos="https://cran.r-project.org/")
library(lattice)
library(ggplot2)
library(caret)
install.packages("rpart",repos="http://cran.rstudio.com/")
install.packages("rpart.plot",repos="http://cran.rstudio.com/")
install.packages("caret",repos="http://cran.rstudio.com/")
install.packages("ctv")
install.packages("mlbench",repos="https://cran.r-project.org/")
library(lattice)
library(ggplot2)
library(caret)
ggplot2::ggplot(...)
install.packages("rpart",repos="http://cran.rstudio.com/")
library(lattice)
library(ggplot2)
library(caret)
library(lattice)
library(ggplot2)
library(caret)
if(!require("swirl"))install.packages("swirl")
library(swirl)
install_course_github('darrenredmond','r_programming_dbs')
if(!require("swirl"))install.packages("swirl")
library(swirl)
install_course_github('darrenredmond','r_programming_dbs')
if(!require("swirl"))install.packages("swirl")
library(swirl)
install_course_github('darrenredmond','r_programming_dbs')
if(!require("swirl"))install.packages("swirl")
library(swirl)
install_course_github('darrenredmond','r_programming_dbs')
if(!require("swirl"))install.packages("swirl")
library(swirl)
install_course_github('darrenredmond','r_programming_dbs')
library(swirl)
install_course_github('darrenredmond','r_programming_dbs')
if(!require("swirl"))install.packages("swirl")
library(swirl)
install_course_github('darrenredmond','r_programming_dbs')
swirl()
1
if(!require("swirl"))install.packages("swirl")
library(swirl)
install_course_github('darrenredmond','r_programming_dbs')
if(!require("swirl"))install.packages("swirl")
library(swirl)
install_course_github('darrenredmond','r_programming_dbs')
if(!require("swirl"))install.packages("swirl")
library(swirl)
install_course_github('darrenredmond','r_programming_dbs')
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
if(!require("swirl"))install.packages("swirl")
library(swirl)
install_course_github('darrenredmond','r_programming_dbs')
if(!require("swirl"))install.packages("swirl")
library(swirl)
install_course_github('darrenredmond','r_programming_dbs')
swirl()
Sys.Date()
mean(c(2, 4, 5))
"boring_function('My first function!')"
"boring_function('My first function!')"
"boring_function(
"boring_function('My first function!')"
"boring_function('My first function!')"
test_func1()
if(!require("swirl"))install.packages("swirl")
library(swirl)
install_course_github('darrenredmond','r_programming_dbs')
swirl()
Sys.Date()
mean(c(2, 4, 5))
test_func1()
submit()
test_func2()
if(!require("swirl"))install.packages("swirl")
library(swirl)
install_course_github('darrenredmond','r_programming_dbs')
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6)
\
unique(c(3, 4, 5, 5, 5, 6, 6)
)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
swirl()
sapply(flags, unique)
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$red, summary)
apply(flags$population, flags$red,
| summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$red, summary)
if(!require("swirl"))install.packages("swirl")
library(swirl)
install_course_github('darrenredmond','r_programming_dbs')
swirl()
ls()
class(plants)
dim(plants)
nrows(plants)
nrows(plants)
nrows(plant)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
if(!require("swirl"))install.packages("swirl")
library(swirl)
install_course_github('darrenredmond','r_programming_dbs')
swirl()
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
: file.exists("mytest.R")
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
if(!require("swirl"))install.packages("swirl")
library(swirl)
install_course_github('darrenredmond','r_programming_dbs')
swirl()
sample(LETTERS)
## For displaying different plots, so Installing and load required packages.
# install.packages("gridExtra") Need to do once
library(plyr)
x = -1                      # Assign x = -1
y = 2                       # Assign y = 2
z = 4                       # Assign z = 4
# Repeat Loop
repeat{
w <- x+y+z              # Assigning sum of x+y+z to w
x <- x*2                # Doubles x with 2
y <- y*3                # Trebles y with 3
z <- z+3                # Adds z with 3
# condition to repeat loop continue only as long as x is less than 12, y is less than 25, and z is less than 10.
if(x >= 12 | y >= 25 | z >= 10){
cat("Value of W when the loop stops is ",w)
break
}
}
c1 <- rainbow(4)
c3 <- rainbow(4,v=0.7)
boxplot(Days~Eth+Lrn,data = quine_data,
main="Days Absent by Students of (Ethnic Learning)",
xlab=c("Ethnic And Learning"),
ylab="Days Absent",
col=c1,
border="black", whiskcol=c1, staplecol=c3, boxcol=c3, outcol=c3, pch=19, cex=2)
# Plot Max.Price vs. Price as red triangles
plot(Cars93$Price, Cars93$Max.Price,
pch = 17,
col = 'red')
# Add Min.Price vs. Price as blue circles
points(Cars93$Price, Cars93$Min.Price,pch = 16, col = 'blue')
# Add an equality reference line with abline()
abline(a = 0, b = 1, lty = 2)
ggplot(Cars93,aes(Origin,fill = Manufacturer))+geom_bar(position = 'dodge')
library(MASS)
data(quine)
quine_data = quine    # Assigning quine dataset to quine_data variable
# ?quine                # to check the description of dataset and relations between the variables
str(quine_data)
quine_data$Eth <- factor(quine_data$Eth,levels=c("A","N"))
quine_data$Lrn <- factor(quine_data$Lrn,levels=c("AL","SL"))
#box_plot <- ggplot(quine_data, aes(x = Days~Eth+Lrn, y = Ozone))
box_plot <- boxplot(Days~Eth+Lrn,data = quine_data)
c1 <- rainbow(4)
c3 <- rainbow(4,v=0.7)
boxplot(Days~Eth+Lrn,data = quine_data,
main="Days Absent by Students of (Ethnic Learning)",
xlab=c("Ethnic And Learning"),
ylab="Days Absent",
col=c1,
border="black", whiskcol=c1, staplecol=c3, boxcol=c3, outcol=c3, pch=19, cex=2)
x = -1                      # Assign x = -1
y = 2                       # Assign y = 2
z = 4                       # Assign z = 4
# Repeat Loop
repeat{
w <- x+y+z              # Assigning sum of x+y+z to w
x <- x*2                # Doubles x with 2
y <- y*3                # Trebles y with 3
z <- z+3                # Adds z with 3
# condition to repeat loop continue only as long as x is less than 12, y is less than 25, and z is less than 10.
if(x >= 12 | y >= 25 | z >= 10){
cat("Value of W when the loop stops is ",w)
break
}
}
# Creates Array of size 5*4*3.
log.array  <- array(
dim = c(5, 4, 3)
)
print(log.array)
library(gmp)    # Using gmp library for isprime() function
# Creates Array of size 5*4*3.
log.array  <- array(
dim = c(5, 4, 3)
)
print(log.array)
library(gmp)    # Using gmp library for isprime() function
i = 2                         # Assigning i = 2
while(i <= 1000) {            # While Loop which squares i until i is greater than 1000.
i = i^2
}
paste("Value of i now is " ,i)
# You only need to run it once:
#install.packages('RCurl')
# Now load it, and access :
library('RCurl')
web_imdb <-  getURL("https://www.imdb.com/chart/top")
film_vec <- grep('Uma Thurman', webpage_imdb,value=TRUE)
i = 2                         # Assigning i = 2
while(i <= 1000) {            # While Loop which squares i until i is greater than 1000.
i = i^2
}
paste("Value of i now is " ,i)
# You only need to run it once:
#install.packages('RCurl')
# Now load it, and access :
library('RCurl')
web_imdb <-  getURL("https://www.imdb.com/chart/top")
webpage_imdb <- strsplit(web_imdb, "\n")[[1]]
# Looking at the structure and the top of the dataset:
str(web_imdb)
film_vec <- grep('Uma Thurman', webpage_imdb,value=TRUE)
film_vec
length(film_vec)                    # No of films does the actress Uma Thurman appear
cat("No of Films does the actress Uma Thurman Appear",length(film_vec))
film1 <- regexpr(">",film_vec)      # Names of Films are
film2 <- regexpr("<",film_vec)
substr(film_vec,film1+1,film2-1)
film1 <- regexpr(">",film_vec)      # Names of Films are
film2 <- regexpr("<",film_vec)
substr(film_vec,film1+1,film2-1)
film_data <- grep('^title',webpage_imdb, value=TRUE)
title_vec <- grep('(dir.)',webpage_imdb, value=TRUE)
head(title_vec)
length(title_vec)
tit_start <- regexpr(">",title_vec)       # Names of these films are as
tit_end <- regexpr("<",title_vec)
#movieNames <- vector(mode="character", length=250)
movieNames<- substr(title_vec,tit_start+1 ,tit_end-1)
movieNames = movieNames[movieNames!= ""]
movieNames
length(movieNames)   # Length of the film Titles
film1 <- regexpr(">",film_vec)      # Names of Films are
film2 <- regexpr("<",film_vec)
substr(film_vec,film1+1,film2-1)
## For Producing different plots, so Installing and load required packages.
# install.packages("gridExtra") Need to do once
library(plyr)
## For Producing different plots, so Installing and load required packages.
# install.packages("gridExtra") Need to do once
library(plyr)
## For Producing different plots, so Installing and load required packages.
# install.packages("gridExtra") Need to do once
#library(plyr)
#library(dplyr)
library(ggplot2)
phat_i=predict(trainset.glm,testset, type="response")  # prediction
data<-read.csv("http://users.stat.ufl.edu/~winner/data/nfl2008_fga.csv",header=TRUE)
x1 <- data$togo
x2 <- data$ydline
x3 <- data$kicker
y <- data$homekick
dataset <- na.omit(data.frame( x1,x2,x3,y)) # remove missing values
n=nrow(dataset)
n
indexes = sample(n,n*(80/100))
trainset = dataset[indexes,]
testset = dataset[-indexes,]
trainset.glm <- glm(y ~.,trainset, family="binomial") # ~. shows that we include all ind. variables
summary(trainset.glm) # variable are sig.
shiny::runApp('C:/Users/GREESHMA/Desktop/vis/Corals')
shiny::runApp('C:/Users/GREESHMA/Desktop/vis/Corals')
